"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞: Frontend —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
–í–µ—Ä—Å–∏—è: 1.0
"""

import os

import yaml
import streamlit as st
from src.data.get_data import load_data, get_dataset
from src.plotting.charts import plot_data, distribution_number_records, target_value_distribution, old_new_customers
from src.train.training import start_training
from src.evaluate.evaluate import evaluate_input, evaluate_from_file

CONFIG_PATH = "../config/params.yml"


def main_page():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
    """
    st.image(
        "https://www.keeptheprice.com/img/loghi_pa/american_express.png",
        width=600,
    )

    st.markdown("# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    st.title("American Express - Default Prediction üè•")
    st.write(
        """
        –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ American Express - Default Prediction –Ω–∞ —Å–∞–π—Ç–µ Kaggle.
        –í —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã 3 —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ, 
        —Ç–∞—Ä–≥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.\n
        –¶–µ–ª—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ–∏—Ç –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Ç–æ–≥–æ, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç American Express 
        –Ω–µ –≤–µ—Ä–Ω–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —Å–≤–æ–µ–π –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ.\n 
        –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–ª–∞—Ç–∏–ª –±–æ–ª–µ–µ 120 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–ø–∏—Å–∫–∏ 
        –µ–º—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —Ü–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - 1, –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ —Ü–µ–ª–µ–≤–æ–µ 
        –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 0.
        """
    )

    # –ù–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø —Å—Ç–æ–ª–±—Ü–æ–≤
    st.markdown(
        """
        ### –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–µ–π 
        –í –¥–∞—Ç–∞—Å–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≥—Ä—É–ø–ø—ã:\n
        D_: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏;\n
        S_: —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ;\n
        P_: –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ;\n
        B_: –±–∞–ª–∞–Ω—Å–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ;\n
        R_*: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∞.
        """
    )


def exploratory():
    """
    –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    """
    st.markdown("# –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–≤–æ–¥ –¥–∞—Ç–∞—Å–µ—Ç–∞
    data = get_dataset(dataset_path=config["preprocessing"]["train_path"])
    st.write(data.head())
    st.markdown(
        '''
        –ö–ª–∏–µ–Ω—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–ª–∞—Ç—è—Ç –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è target –∑–Ω–∞—á–µ–Ω–∏–µ - 1, 
        –≤ –∏–Ω–æ–º —Å–ª—É—á–∞–µ target –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ - 0.
        '''
    )

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    depending_on_date = st.sidebar.checkbox("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –Ω–µ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–æ–≤")
    number_records = st.sidebar.checkbox("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª-–≤—É –∑–∞–ø–∏—Å–µ–π")
    target_distribution = st.sidebar.checkbox("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è")
    ratio_customers = st.sidebar.checkbox("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö/–Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")

    if depending_on_date:
        st.pyplot(
            plot_data(data=data)
        )
    if number_records:
        st.pyplot(
            distribution_number_records(data=data)
        )
    if target_distribution:
        st.pyplot(
            target_value_distribution(data=data)
        )
    if ratio_customers:
        st.pyplot(
            old_new_customers(data=data)
        )


def training():
    """
    –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
    """
    st.markdown("# –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ CatBoost")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)

    endpoint = config["endpoints"]["train"]

    if st.button("Start training"):
        start_training(config=config, endpoint=endpoint)


def prediction():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø—É—Ç–µ–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    st.markdown("# Prediction")
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    endpoint = config["endpoints"]["prediction_input"]
    unique_data_path = config["preprocessing"]["unique_values_path"]

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    if os.path.exists(config["train"]["model_path"]):
        evaluate_input(unique_data_path=unique_data_path, endpoint=endpoint)
    else:
        st.error("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")


def prediction_from_file():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    st.markdown("# Prediction")
    with open(CONFIG_PATH) as file:
        config = yaml.load(file, Loader=yaml.FullLoader)
    endpoint = config["endpoints"]["prediction_from_file"]

    upload_file = st.file_uploader(
        "", type=["ftr"], accept_multiple_files=False
    )
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª
    if upload_file:
        dataset_ftr_df, files = load_data(data=upload_file, type_data="Test")
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        if os.path.exists(config["train"]["model_path"]):
            evaluate_from_file(data=dataset_ftr_df, endpoint=endpoint, files=files)
        else:
            st.error("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å")


def main():
    """
    –°–±–æ—Ä–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ
    """
    page_names_to_funcs = {
        "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞": main_page,
        "–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö": exploratory,
        "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏": training,
        "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ": prediction,
        "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞": prediction_from_file,
    }
    selected_page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", page_names_to_funcs.keys())
    page_names_to_funcs[selected_page]()


if __name__ == "__main__":
    main()
